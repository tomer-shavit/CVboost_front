// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma" 
}

// Define the database schema using Prisma
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  createdAt          DateTime  @default(now()) 
  updatedAt          DateTime  @updatedAt
  resumeBoostsAvailable  Int
  resumeBoostsTotal  Int
  resumeBoosts       ResumeBoost[] // Opposite relation field
  // Define the email index
  @@index([email], name: "idxEmail")
  //nextAuth
  image         String?
  accounts      Account[]
  sessions      Session[]
}

// Define the User table

// Define the ResumeBoost table
model ResumeBoost {
  boostId              Int       @id @default(autoincrement())
  userId               String
  createdAt            DateTime @default(now()) 
  boostVersion      Int     // Enum BoostVerstion saved in resume function
  resumeHash Bytes // Using SHA 256
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedbacks               Feedback[]
}


model Feedback {
  feedbackId        Int       @id @default(autoincrement())
  boostId           Int
  createdAt         DateTime  @default(now()) 
  feedbackType      Int // Enum FeedbackType saved in resume function
  feedbackText      String    @db.VarChar(1200) // The feedback text MUST be compressed! 
  score             Int
  isLiked           Boolean
  boost             ResumeBoost @relation(fields: [boostId], references: [boostId], onDelete: Cascade)
  @@index([boostId], name: "idxBoostId")
}


//Next auth tabels

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}